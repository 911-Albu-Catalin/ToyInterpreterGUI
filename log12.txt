Id: 1
Execution Stack:
[(Ref(int) v1 ; (Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))))))]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))))), Ref(int) v1]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))))), Ref(int) v1]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))))]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))))]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))), Ref(int) v2]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))), Ref(int) v2]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))), Ref(int) v3]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))), Ref(int) v3]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))), int cnt]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))), int cnt]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))))]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))), HeapAllocation(v1, 2)]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))), HeapAllocation(v1, 2)]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))), HeapAllocation(v2, 3)]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))), HeapAllocation(v2, 3)]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Barrier Table:
{}
Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Barrier Table:
{}
Id: 1
Execution Stack:
[(newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))), HeapAllocation(v3, 4)]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Barrier Table:
{}
Id: 1
Execution Stack:
[(newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))), HeapAllocation(v3, 4)]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Barrier Table:
{}
Id: 1
Execution Stack:
[(newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{}
Id: 1
Execution Stack:
[(newBarrier(cnt, ReadHeap(v2)) ; (Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))), newBarrier(cnt, ReadHeap(v2))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))), newBarrier(cnt, ReadHeap(v2))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))) ; (Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))), Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3)))), Fork((await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 2
Execution Stack:
[(await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))) ; (await(cnt) ; Print(ReadHeap(v3))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 2
Execution Stack:
[(await(cnt) ; (HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(await(cnt) ; Print(ReadHeap(v3))), Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(await(cnt) ; Print(ReadHeap(v3))), Fork((await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[]}
Id: 1
Execution Stack:
[(await(cnt) ; Print(ReadHeap(v3)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 3
Execution Stack:
[(await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 1
Execution Stack:
[(await(cnt) ; Print(ReadHeap(v3)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; Print(ReadHeap(v1)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 3
Execution Stack:
[(await(cnt) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 1
Execution Stack:
[Print(ReadHeap(v3)), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 2
Execution Stack:
[Print(ReadHeap(v1)), HeapWriting(v1, ReadHeap(v1) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 1
Execution Stack:
[Print(ReadHeap(v3)), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 2
Execution Stack:
[Print(ReadHeap(v1)), HeapWriting(v1, ReadHeap(v1) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Barrier Table:
{1=3=[2]}
Id: 1
Execution Stack:
[Print(ReadHeap(v3))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 2
Execution Stack:
[Print(ReadHeap(v1))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 1
Execution Stack:
[Print(ReadHeap(v3))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 2
Execution Stack:
[Print(ReadHeap(v1))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 1
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 2
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2))), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; Print(ReadHeap(v2)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[Print(ReadHeap(v2)), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[Print(ReadHeap(v2)), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[Print(ReadHeap(v2))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=300, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[Print(ReadHeap(v2))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap Table:
{1=20, 2=300, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
Id: 3
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap Table:
{1=20, 2=300, 3=4}
Barrier Table:
{1=3=[2, 1, 3]}
