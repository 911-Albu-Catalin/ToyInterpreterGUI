Id: 1
Execution Stack:
[(Ref(int) v1 ; (Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))))))]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))))), Ref(int) v1]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))))), Ref(int) v1]
Symbol table:
{}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))))]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v2 ; (Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))))]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))), Ref(int) v2]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))), Ref(int) v2]
Symbol table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(Ref(int) v3 ; (int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))), Ref(int) v3]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))), Ref(int) v3]
Symbol table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(int cnt ; (HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))))]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))), int cnt]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))), int cnt]
Symbol table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v1, 2) ; (HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))))]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))), HeapAllocation(v1, 2)]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))), HeapAllocation(v1, 2)]
Symbol table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v2, 3) ; (HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))), HeapAllocation(v2, 3)]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))), HeapAllocation(v2, 3)]
Symbol table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Latch Table:
{}

Id: 1
Execution Stack:
[(HeapAllocation(v3, 4) ; (newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Latch Table:
{}

Id: 1
Execution Stack:
[(newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))), HeapAllocation(v3, 4)]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Latch Table:
{}

Id: 1
Execution Stack:
[(newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))), HeapAllocation(v3, 4)]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3}
Latch Table:
{}

Id: 1
Execution Stack:
[(newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{}

Id: 1
Execution Stack:
[(newLatch(cnt, ReadHeap(v2)) ; (Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{}

Id: 1
Execution Stack:
[(Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))), newLatch(cnt, ReadHeap(v2))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{}

Id: 1
Execution Stack:
[(Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))), newLatch(cnt, ReadHeap(v2))]
Symbol table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{}

Id: 1
Execution Stack:
[(Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))) ; (await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))), Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100)))), Fork((HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(await(cnt) ; (Print(100) ; (countDown(cnt) ; Print(100))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(HeapWriting(v1, ReadHeap(v1) * 10) ; (Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))), HeapWriting(v1, ReadHeap(v1) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))), HeapWriting(v1, ReadHeap(v1) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=2, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(Print(ReadHeap(v1)) ; (countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))), Print(ReadHeap(v1))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))), Print(ReadHeap(v1))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=3}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))), Print(2)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))), Print(2)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 2
Execution Stack:
[Fork((HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 2
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(HeapWriting(v2, ReadHeap(v2) * 10) ; (Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))), HeapWriting(v2, ReadHeap(v2) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=3, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(Print(ReadHeap(v2)) ; (countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))), Print(ReadHeap(v2))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))), Print(ReadHeap(v2))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[(countDown(cnt) ; Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=2}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))), Print(3)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))), Print(3)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 3
Execution Stack:
[Fork((HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt))))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 3
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(HeapWriting(v3, ReadHeap(v3) * 10) ; (Print(ReadHeap(v3)) ; countDown(cnt)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(Print(ReadHeap(v3)) ; countDown(cnt)), HeapWriting(v3, ReadHeap(v3) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(Print(ReadHeap(v3)) ; countDown(cnt)), HeapWriting(v3, ReadHeap(v3) * 10)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=4}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(Print(ReadHeap(v3)) ; countDown(cnt))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[(Print(ReadHeap(v3)) ; countDown(cnt))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[countDown(cnt), Print(ReadHeap(v3))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[countDown(cnt), Print(ReadHeap(v3))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 4
Execution Stack:
[countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=1}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 4
Execution Stack:
[Print(4)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100))), await(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 4
Execution Stack:
[Print(4)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 4
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(Print(100) ; (countDown(cnt) ; Print(100)))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(countDown(cnt) ; Print(100)), Print(100)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(countDown(cnt) ; Print(100)), Print(100)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(countDown(cnt) ; Print(100))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[(countDown(cnt) ; Print(100))]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100), countDown(cnt)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100), Print(1)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100), Print(1)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100, 1]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[Print(100)]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100, 1]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

Id: 1
Execution Stack:
[]
Symbol table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 2, 30, 3, 40, 4, 100, 1, 100]
File Table:
{}
Heap Table:
{1=20, 2=30, 3=40}
Latch Table:
{1=0}

